import pytz

from datetime import datetime, timedelta, date
from tortoise.transactions import in_transaction
from tortoise.functions import Sum

from bot.config import REDIS_KEYS, YOOKASSA_PAYMENT_STATUS, TRIAL_NOTIFICATION_MESSAGE
from db.models import User, Meal, UserDailyReport, UserDailyMeal, Payment
from bot.services.logger import logger
from bot.redis.client import redis_client
from run import bot


EXCLUDED_ID = 5130573596
ONE_TIME_NOTIFICATION_TEXT = """–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –¢–∞—Ä–µ–ª–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üíö

–Ø –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫...
–ù–æ –≤—Å—ë –ª–µ–≥–∫–æ –≤–µ—Ä–Ω—É—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!

‚úÖ –ü–æ–¥—Å—á—ë—Ç, –∞–Ω–∞–ª–∏–∑, –¥–Ω–µ–≤–Ω–∏–∫ ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
üí≥ –í—Å–µ–≥–æ 270‚ÇΩ –≤ –º–µ—Å—è—Ü

üëâ /subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
"""

async def notify_old_users_about_system_change(ctx):
    if date.today() != date(2025, 6, 22):
        logger.info("[NOTIFY_OLD] –°–µ–≥–æ–¥–Ω—è –Ω–µ 22 –∏—é–Ω—è, –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return

    logger.info("[NOTIFY_OLD] –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    users = await User.filter().exclude(id=EXCLUDED_ID)
    logger.info(f"[NOTIFY_OLD] –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    for user in users:
        try:
            await ctx['bot'].send_message(user.id, ONE_TIME_NOTIFICATION_TEXT)
            logger.info(f"[NOTIFY_OLD] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user.id}")
        except Exception as e:
            logger.warning(f"[NOTIFY_OLD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ user_id={user.id}: {e}")
    


async def update_daily_report(ctx, user_id: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—É–º–º–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    :param ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç—á—ë—Ç
    """
    logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}...")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–∞–π–º–∑–æ–Ω—É
    user = await User.get(id=user_id)
    user.meal_count += 1
    await user.save()

    user_tz = pytz.timezone(user.timezone)

    # –¢–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now_user_tz = datetime.now(user_tz)

    # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    today_start = now_user_tz.replace(hour=0, minute=0, second=0, microsecond=0)
    tomorrow_start = today_start + timedelta(days=1)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—ã –≤ UTC
    today_start_utc = today_start.astimezone(pytz.UTC)
    tomorrow_start_utc = tomorrow_start.astimezone(pytz.UTC)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —ç—Ç–∏ —Å—É—Ç–∫–∏
    meals = await Meal.filter(
        user_id=user_id,
        created_at__gte=today_start_utc,
        created_at__lt=tomorrow_start_utc
    ).order_by("created_at")

    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
    agg = await Meal.filter(
        user_id=user_id,
        created_at__gte=today_start_utc,
        created_at__lt=tomorrow_start_utc
    ).annotate(
        total_weight=Sum("total_weight"),
        total_calories=Sum("total_calories"),
        total_protein=Sum("total_protein"),
        total_fat=Sum("total_fat"),
        total_carbs=Sum("total_carbs"),
        total_fiber=Sum("total_fiber"),
    ).values("total_weight", "total_calories", "total_protein", "total_fat", "total_carbs", "total_fiber")

    totals = agg[0] if agg else {}

    async with in_transaction():
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
        await UserDailyReport.filter(user_id=user_id, date=today_start.date()).delete()
        await UserDailyReport.create(
            user_id=user_id,
            date=today_start.date(),
            total_weight=totals.get("total_weight") or 0,
            total_calories=totals.get("total_calories") or 0,
            total_protein=totals.get("total_protein") or 0,
            total_fat=totals.get("total_fat") or 0,
            total_carbs=totals.get("total_carbs") or 0,
            total_fiber=totals.get("total_fiber") or 0,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
        await UserDailyMeal.filter(user_id=user_id, date=today_start.date()).delete()

        for i, meal in enumerate(meals, start=1):
            await UserDailyMeal.create(
                user_id=user_id,
                date=today_start.date(),
                name=meal.name,
                calories=meal.total_calories,
                order=i
            )
    
    redis_key : str = REDIS_KEYS.STATS.value.format(
        user_id=user_id,
        date=today_start.date().isoformat()
    )
    logger.info(f"–£–¥–∞–ª—è–µ–º –∫–µ—à –ø–æ –∫–ª—é—á—É : {redis_key}")
    await redis_client.delete(redis_key)

    logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} ‚Äî {today_start.date()}")


async def notify_users_trial_ending(ctx):
    now = datetime.now(pytz.UTC)
    target_date = (now - timedelta(days=3)).date()

    start_dt = datetime.combine(target_date, datetime.min.time(), tzinfo=pytz.UTC)
    end_dt = datetime.combine(target_date, datetime.max.time(), tzinfo=pytz.UTC)

    users = await User.filter(created_at__gte=start_dt, created_at__lte=end_dt)

    logger.info(f"[TRIAL END] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π {target_date}: {len(users)}")

    for user in users:
        logger.info(f"[TRIAL END] user_id={user.id}, created_at={user.created_at}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        has_active = await Payment.filter(
            user=user,
            status=YOOKASSA_PAYMENT_STATUS.SUCCEEDED.value,
            user_subscription__start_date__lte=now.date(),
            user_subscription__end_date__gte=now.date()
        ).exists()
        if has_active:
            logger.info(f"[TRIAL END] user_id={user.id} ‚Äî –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–ª–∞—Ç–∏–ª
        had_subscription = await Payment.filter(
            user=user,
            status=YOOKASSA_PAYMENT_STATUS.SUCCEEDED.value
        ).exists()
        if had_subscription:
            logger.info(f"[TRIAL END] user_id={user.id} ‚Äî —É–∂–µ –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        try:
            await ctx['bot'].send_message(user.id, TRIAL_NOTIFICATION_MESSAGE)
            logger.info(f"[TRIAL END] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user.id}")
        except Exception as e:
            logger.warning(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ user_id={user.id}: {e}")