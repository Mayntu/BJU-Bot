from bot.services.logger import logger
from bot.config import MAX_TOKENS, BOT_MEAL_REPORT
from bot.services.openai_client import client
from bot.services.images_handler import get_image_bytes, upload_to_imgbb
from db.models import User, Meal, Ingredient
from bot.schemas.food_analyze import IngredientAnalysis, MealAnalysis
from bot.prompts.food_analyze import get_food_analysis_system_prompt, get_food_analysis_user_prompt

import aiohttp


async def get_food_analysis(image_url: str) -> MealAnalysis:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –±–ª—é–¥–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤ –∏ –∫–∞–ª–æ—Ä–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API.
    
    :param image_url: URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–ª—é–¥–∞
    :return: –û–±—ä–µ–∫—Ç MealAnalysis —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """


    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã –ø–æ —Å—Å—ã–ª–∫–µ: {image_url}")
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    messages : list[dict] = [
        {
            "role": "system",
            "content": get_food_analysis_system_prompt(),
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": get_food_analysis_user_prompt(),
                },
                {
                    "type": "image_url",
                    "image_url": {"url": image_url}
                }
            ]
        }
    ]

    logger.info(f"{int(MAX_TOKENS)} —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
    logger.info(f"{image_url} –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ openai –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞
    completion = await client.beta.chat.completions.parse(
        model="gpt-4o",
        messages=messages,
        max_tokens=int(MAX_TOKENS),
        response_format=MealAnalysis,
    )

    logger.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not completion.choices or not completion.choices[0].message.parsed:
        error_message : str = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        logger.error(error_message)
        raise ValueError(error_message)
    
    logger.info(completion.choices[0].message.model_dump())
    
    return completion.choices[0].message.parsed


async def analyze_food_image(file_url : str, user_id : int) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç openai –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î.
    :param file_url: —Ç–µ–ª–µ–≥—Ä–∞–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–ª—é–¥–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞
    """


    # –ö–∞—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ file_url —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    image_bytes : bytes = get_image_bytes(image_url=file_url)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Imgbb
    image_url = await upload_to_imgbb(image_bytes=image_bytes)

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API
    food_result : MealAnalysis = await get_food_analysis(image_url=image_url)

    meal : Meal = Meal(
        user=await User.get(telegram_id=user_id),
        name=food_result.title,
        total_weight=food_result.total_weight,
        total_calories=food_result.calories,
        total_protein=food_result.proteins,
        total_fat=food_result.fats,
        total_carbs=food_result.carbs,
        total_fiber=food_result.fiber,
    )
    await meal.save()
    
    result : str = BOT_MEAL_REPORT.format(
        meal_name=meal.name,
        meal_weight=meal.total_weight,
        meal_ccal=meal.total_calories,
        meal_protein=meal.total_protein,
        meal_fat=meal.total_fat,
        meal_carb=meal.total_carbs,
        meal_fiber=meal.total_fiber,
    )

    for ingredient in food_result.ingredients:
        ingredient_model : Ingredient = Ingredient(
            meal=meal,
            name=ingredient.name,
            weight=ingredient.weight,
            calories=ingredient.calories,
            protein=ingredient.protein,
            fat=ingredient.fat,
            carbs=ingredient.carbs,
            fiber=ingredient.fiber,
        )
        await ingredient_model.save()
        result += f"\n[{ingredient.name}] - {ingredient.weight} –≥—Ä. | {ingredient.calories} –∫–∫–∞–ª | –ë–µ–ª–∫–∏ {ingredient.protein} –≥—Ä. | –ñ–∏—Ä—ã {ingredient.fat} –≥—Ä. | –£–≥–ª–µ–≤–æ–¥—ã {ingredient.carbs} –≥—Ä. | –ö–ª–µ—Ç—á–∞—Ç–∫–∞ {ingredient.fiber} –≥—Ä;\n"
    
    logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–ª—é–¥–æ: {meal.name} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")
    return result

# async def analyze_food_img(url : str) -> str:
#     """
#     –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –±–ª—é–¥–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤ –∏ –∫–∞–ª–æ—Ä–∏–∏.
#     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API.
    
#     :param url: URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–ª—é–¥–∞
#     :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
#     """

#     return "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞:\n" \
#            "–ö–∞–ª–æ—Ä–∏–∏: 500 –∫–∫–∞–ª\n" \
#            "–ë–µ–ª–∫–∏: 30 –≥\n" \
#            "–ñ–∏—Ä—ã: 20 –≥\n" \
#            "–£–≥–ª–µ–≤–æ–¥—ã: 50 –≥"